name: Deploy Infrastructure

on:
  workflow_dispatch:

env:
  AWS_REGION: eu-central-1

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4     

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
        
      - name: Terraform Init
        working-directory: ./infrastructure/
        run: terraform init

      - name: Terraform Validate
        working-directory: ./infrastructure/
        run: terraform validate
      
      - name: Terraform Plan
        working-directory: ./infrastructure/
        run: terraform plan 

      - name: Terraform Apply
        working-directory: ./infrastructure/
        run: terraform apply -auto-approve
        env:
          TF_VAR_aws_account_id: ${{ secrets.AWS_ACCOUNT_ID }}
          TF_VAR_aws_region: ${{ env.AWS_REGION }}

      - name: Get Bucket Name from Terraform Output
        id: get_bucket
        working-directory: ./infrastructure/
        run: |
          BUCKET_NAME=$(terraform output -raw s3_bucket_name)
          echo "bucket_name=$BUCKET_NAME" >> "$GITHUB_OUTPUT"

      - name: Upload files to S3 (only if bucket is empty)
        run: |
          echo "Checking if bucket '${{ steps.get_bucket.outputs.bucket_name }}' is empty..."
          
          if aws s3 ls s3://${{ steps.get_bucket.outputs.bucket_name }}/ | grep .; then
            echo "❌ Bucket is NOT empty. Skipping upload."
          else
            echo "✅ Bucket is empty. Uploading files..."
            aws s3 cp sample_files/ s3://${{ steps.get_bucket.outputs.bucket_name }}/ --recursive
          fi
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}
        
        
